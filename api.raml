#%RAML 1.0
title: BountySports API Documentation
baseUri: https://bountysports.com/
version: 1.0

/users/update_user_refer_code:
  displayName: Update user refer code
  post:
    description: Update user refer code
    responses:
      200:
        body:
          application/json:

/users/get_refer_reward_money:
  displayName: Get refer reward money
  post:
    description: Get refer reward money
    responses:
      200:
        body:
          application/json:

/users/update_refer_reward_money:
  displayName: Update refer reward money
  post:
    description: Update refer reward money
    body:
      application/json:
        type: |
          {
            "type": "object",
            "properties": {
              "reward_money": {
                "type": "number",
                "required": true
              }
            }
          }
        example: |
          {
            "reward_money": 100
          }
    responses:
      200:
        body:
          application/json:

/users/send_otp:
  displayName: Send user OTP code
  post:
    description: Send user OTP code
    body:
      application/json:
        type: |
          {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "required": true
              },
              "otp": {
                "type": "number"
              }
            }
          }
        example: |
          {
            "email": "john.doe@email.com",
            "otp": 4587
          }
    responses:
      200:
        body:
          application/json:

/users/register:
  displayName: Register a new user
  post:
    description: Register a new user. Requires recaptcha pass
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/register_manual:
  displayName: Register a new user manually
  post:
    description: Register a new user manually
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/login:
  displayName: User login
  post:
    description: User login
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/adminlogin:
  displayName: Admin user login
  post:
    description: Admin user login
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/verifyotpadmin:
  displayName: Verify admin user otp
  post:
    description: Verify admin user otp
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/verifyotp:
  displayName: Verify user otp
  post:
    description: Verify user otp
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/resendotp:
  displayName: Resend OTP code
  post:
    description: Resend OTP code
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/checksocialid:
  displayName: Check user social id
  post:
    description: Check user social id
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/sociallogin:
  displayName: Social login
  post:
    description: Social login
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/myprofile:
  displayName: Get user profile
  post:
    description: Get user profile
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/updateprofile:
  displayName: Update user profile
  post:
    description: Update user profile
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/changepassword:
  displayName: Change user password
  post:
    description: Change user password
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/forgetpassword:
  displayName: Send forgot password code
  post:
    description: Send forgot password code
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/getbalance:
  displayName: Get user balance
  post:
    description: Returns user balance and promotion balance
    body:
      application/json:
        example: |
          {
            "user_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": 1200.5,
                "promotion_blc": 400
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "Invalid User ID."
              }

/users/addbalanceadmin:
  displayName: Add admin balance
  post:
    description: Same as /users/addbalance. The difference is payment_transaction_id is null and payment_gateway is "Promotion" for new transaction.
    body:
      application/json:
        example: |
          {
            "user_id": 1,
            "amount": 100,
            "type": 0 // check /users/alltransactions response example
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success."
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "Invalid User ID."
              }

/users/addbalance:
  displayName: Add user balance
  post:
    description: Update user balance, insert new transaction and update hubspot data.
    body:
      application/json:
        example: |
          {
            "user_id": 1,
            "amount": 100,
            "transaction_id": "txid",
            "payment_gateway": "Credit Card"
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success."
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "Invalid User ID."
              }

/users/transactions:
  displayName: Get transactions
  post:
    description: Get transactions
    body:
      application/json:
        example: |
          {
            "user_id": 123,
            "page": 1,
            "type": 0 // 0 = deposit , 1 = withdrawal , 2 = join bet , 3 = win bet , 4 = refund ,5= refrarl reward 6 = all
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [
                  {
                    user_id: 123,
                    amount: 10,
                    payment_transaction_id: "txid",
                    payment_gateway: "gateway",
                    payment_date: 16403999,
                    contest_id: "contestid",
                    contest_name: "contestname",
                    transaction_type: 0 // 0 = deposit , 1 = withdrawal , 2 = join bet , 3 = win bet , 4 = refund from a cancelled contest ,5 =Referral
                  }
                ]
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No transactions found."
              }

/users/getbankdetails:
  displayName: Get bank details
  post:
    description: Get bank details
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/savebankdetails:
  displayName: Save bank details
  post:
    description: Save bank details
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/updatebankdetails:
  displayName: Update bank details
  post:
    description: Update bank details
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/withdrawal:
  displayName: Generate withdrawal request
  post:
    description: Generate withdrawal request
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/mywithdrawalrequests:
  displayName: Get a user's withdrawal requests
  post:
    description: Get a user's withdrawal requests
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/withdrawalrequests:
  displayName: Get all users withdrawal requests
  post:
    description: Get all users withdrawal requests
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/approvewithdrawal:
  displayName: Approve withdrawal
  post:
    description: Approve withdrawal
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/rejectwithdrawal:
  displayName: Reject withdrawal
  post:
    description: Reject withdrawal
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/alltransactions:
  displayName: Get all transactions
  post:
    description: Get all transactions
    body:
      application/json:
        example: |
          {
            "page": 1,
            "from_date": 1645807582, // unix timestamp in seconds
            "to_date": 1645808582, // unix timestamp in seconds
            "type": 0 // 0 = deposit , 1 = withdrawal , 2 = join bet , 3 = win bet , 4 = refund ,5 =refrral 6 = all 
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [
                  {
                    user_id: 123,
                    amount: 10,
                    payment_transaction_id: "txid",
                    payment_gateway: "gateway",
                    payment_date: 16403999,
                    contest_id: "contestid",
                    contest_name: "contestname",
                    transaction_type: 0, // 0 = deposit , 1 = withdrawal , 2 = join bet , 3 = win bet , 4 = refund from a cancelled contest ,5 =Referral
                    user_details: {} // User details object
                  }
                ]
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No data found."
              }

/users/allusers:
  displayName: Get all users
  post:
    description: Get all users
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/usersbyid:
  displayName: Get user by id
  post:
    description: Get user by id
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/downloadtransactions:
  displayName: Download transactions
  post:
    description: Download transactions
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/downloadusers:
  displayName: Download users
  post:
    description: Download users
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/downloadwithdrawalrequests:
  displayName: Download withdrawal requests
  post:
    description: Download withdrawal requests
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/dashboard:
  displayName: Get dashboard data
  post:
    description: Get dashboard data
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/saveleads:
  displayName: Save leads
  post:
    description: Save leads
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/sendsupportmail:
  displayName: Send support mail
  post:
    description: Send support mail
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/removeuserflag:
  displayName: Remove user flag
  post:
    description: Remove user flag
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/blockunblockuser:
  displayName: Block user
  post:
    description: Block user
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/checkusernamesignup:
  displayName: Check if usernames exist before signup
  post:
    description: Check if usernames exist before signup
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/checkusernameoremail:
  displayName: Check username or email if exists
  post:
    description: Check username or email if exists
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/checkusernameeditprofile:
  displayName: Check user can edit profile
  post:
    description: Check user can edit profile
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/getreferredusers:
  displayName: Get referred users
  post:
    description: Get referred users
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/getpromocodes:
  displayName: Get promo codes
  post:
    description: Get promo codes
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/addpromocode:
  displayName: Add promo code
  post:
    description: Add promo code
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/editpromocode:
  displayName: Edit promo code
  post:
    description: Edit promo code
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/getcommunicationpref:
  displayName: Get communication preference
  post:
    description: Get communication preference
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/editcommunicationpref:
  displayName: Edit communication preference
  post:
    description: Edit communication preference
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/updateappusetime:
  displayName: Update app use time
  post:
    description: Update app use time
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/users/acceptnewterms:
  displayName: Accept new terms
  post:
    description: Accept new terms
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/sports/getall:
  displayName: Get all sports
  post:
    description: Get all sports
    body:
      application/json:
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [
                  {
                    name: "", // string().length(50).required(),
                    logo: "", // string().length(50).required(),
                    apiId: "", //string().length(100).required(),
                    slug: "", // string().length(20).required(),
                    isActive: 1, // number(),
                    isDeletetd: 0, // number(),
                    isMultiTeamSports: 1 // number() // 1 if multi team match sports like golf
                  }
                ]
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No Sports Found."
              }

/matches/getmatchbysports:
  displayName: Get match by sports
  post:
    description: Get match by sports
    body:
      application/json:
        example: |
          {
            "sport_id": "",
            "status": 0, // 0 or 1
            "type": 0, // 0= single sport, 1=multisports
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [
                  {
                    match_api_id: string().length(255).required(),
                    sport_id: string().length(100).required(),
                    t1Id: string().length(100).required(),
                    t2Id: string().length(100).required(),
                    t3Id: string().length(100), //for soccer
                    t1Name: string().length(100).required(),
                    t2Name: string().length(100).required(),
                    t3Name: string().length(100), //for soccer
                    t1ShortName: string().length(100).required(),
                    t2ShortName: string().length(100).required(),
                    t3ShortName: string().length(100), //for soccer
                    t1Line: number(),
                    t2Line: number(),
                    drawLine: number(), //for soccer
                    matchResult: number(), // 0 = pending , 1 = result comes, 2 = tie , 3 = abandoned
                    winnerTeamId: string().length(100).required(),
                    matchDate: number(),
                    apiType: string(),
                    team1Points: number(),
                    team2Points: number(),
                    teamDrawPoints: number(), //for soccer
                    status: number() // 0= same odds , admin will update and not for the create contests ; 1 = active admin cant update odds
                  }
                ]
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No Matches Found."
              }

/matches/getmatchbypgasports:
  displayName: Get match by pga sports
  post:
    description: Get match by pga sports
    body:
      application/json:
        example: |
          {
            "sport_id": ""
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [
                  {
                    match_api_id:string().length(255).required(),  // torunament id
                    sport_id:string().length(100).required(),   
                    tournament_name:string().length(100).required(),
                    matchResult:number(), // 0 = pending , 1 = result comes, 2 = tie , 3 = abandoned
                    player_data: [
                      {
                       playerId:string(100),
                        playerTournamentId:string(100),
                        playerName:string(100),
                        playerOdds:number(),
                        rank:number(),
                        isWin:boolean()
                      }
                    ],
                    matchDate:number(),
                    matchEndDate:number()
                  }
                ]
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No Matches Found."
              }

/matches/updateMatchResultAdmin:
  displayName: Update match result by admin
  post:
    description: Update match result by admin
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/matches/editmatchodds:
  displayName: Edit match odds
  post:
    description: Edit match odds
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/selection_made:
  displayName: Make contest selection
  post:
    description: Make contest selection
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/getcontestusersadmin:
  displayName: Get contest users for admin
  post:
    description: Get contest users for admin
    body:
      application/json:
        example: |
          {
            "contest_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [] // array of /single contest response
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No contest found."
              }

/contests/getmacthesbycontestadmin:
  displayName: Get matches by contest for admin
  post:
    description: Get matches by contest for admin
    body:
      application/json:
        example: |
          {
            "contest_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [] // array of /single contest response
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No contest found."
              }

/contests/updatecontestuserpointadmin:
  displayName: Update contest user point for admin
  post:
    description: Update contest user point for admin
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/createcontest:
  displayName: Create contest
  post:
    description: Create contest
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/getupcomingcontest:
  displayName: Get upcoming contest
  post:
    description: Get upcoming contest
    body:
      application/json:
        example: |
          {
            "sport_id": "",
            "page": 2,
            "user_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [] // array of /single contest response
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No contest found."
              }

/contests/getfeaturedcontest:
  displayName: Get featured contest
  post:
    description: Get featured contest
    body:
      application/json:
        example: |
          {
            "sport_id": "",
            "page": 2,
            "user_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [] // same as getupcomingcontest
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No contest found."
              }

/contests/single:
  displayName: Get single contest
  post:
    description: Get single contest
    body:
      application/json:
        example: |
          {
            "contest_id": 123,
            "user_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": {
                  sports_id: string().length(255).required(),
                  title: string().length(255).required(),
                  description: string().length(255).required(),
                  entry_fee: number(),
                  maximum_entry_slots: number(),
                  number_of_top_players_win: number(), // in case of PGA else pass 0
                  create_on: number(),
                  is_active: number(),
                  is_deleted: number(),
                  priceDistribution: array().of(PriceDistrobutionSchema),
                  PGAPlayersSchema: array().of(PGAPlayersSchema), // in case of PGA
                  isMultiTeamContest: number(), // 1 =  in case of PGA, 0 = in case of others
                  contestStartDate: number(),
                  isContestEnded: number(),
                  totalUserEnrolled: number(),
                  isFeatured: number(),
                  contestType: number(), //  0= single sport contest, 1 = multisportcontest
                  multiSportsIds: array() // multiple sports ids
                }
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No Matches Found."
              }

/contests/contestmatchdetails:
  displayName: Get contest match details
  post:
    description: Get contest match details
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/joincontest:
  displayName: Join test
  post:
    description: Join test
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/editcontestmatches:
  displayName: Edit contest matches
  post:
    description: Edit contest matches
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/leaderboard:
  displayName: Get leader board
  post:
    description: Get leader board
    body:
      application/json:
        example: |
          {
            "contest_id": 2,
            "user_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [
                  {
                    contest_id: string().length(255).required(),
                    user_id: object(),
                    amount_paid: number(),
                    joined_on: number(),
                    rank: number(),
                    points: number(),
                    prizeWin: number(),
                    rank_show: number(),
                    tempPoints: number(), // for user blocked and unblocked condition
                    isBlocked: number(), // for user blocked and unblocked condition
                  }
                ]
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No Data Found."
              }

/contests/getlivecontest:
  displayName: Get live contests
  post:
    description: Get live contests
    body:
      application/json:
        example: |
          {
            "sport_id": "",
            "page": 2,
            "user_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [] // see /getupcomingcontest
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No contest found."
              }

/contests/getpastcontest:
  displayName: Get past contests
  post:
    description: Get past contests
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/downloadpastcontestadmin:
  displayName: Download past contests for admin
  post:
    description: Download past contests for admin
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/getlivecontestadmin:
  displayName: Get live contests for admin
  post:
    description: Get live contests for admin
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/getpastcontestadmin:
  displayName: Get past contests for admin
  post:
    description: Get past contests for admin
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/getupcomingcontestadmin:
  displayName: Get upcoming contests by admin
  post:
    description: Get upcoming contests by admin
    body:
      application/json:
        example: |
          {
            "sport_id": "",
            "page": 2,
            "sort_total_players": "asc", // asc ,desc
            "sort_live_in": "asc", // asc ,desc
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": [] // see /getupcomingcontest
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No contest found."
              }

/contests/singleadmin:
  displayName: Get single contest for admin
  post:
    description: Get single contest for admin
    body:
      application/json:
        example: |
          {
            "contest_id": 123
          }
    responses:
      200:
        body:
          application/json:
            example: |
              {
                "status": 200,
                "message": "Success.",
                "data": {
                  sports_id: string().length(255).required(),
                  title: string().length(255).required(),
                  description: string().length(255).required(),
                  entry_fee: number(),
                  maximum_entry_slots: number(),
                  number_of_top_players_win: number(), // in case of PGA else pass 0
                  create_on: number(),
                  is_active: number(),
                  is_deleted: number(),
                  priceDistribution: array().of(PriceDistrobutionSchema),
                  PGAPlayersSchema: array().of(PGAPlayersSchema), // in case of PGA
                  isMultiTeamContest: number(), // 1 =  in case of PGA, 0 = in case of others
                  contestStartDate: number(),
                  isContestEnded: number(),
                  totalUserEnrolled: number(),
                  isFeatured: number(),
                  contestType: number(), //  0= single sport contest, 1 = multisportcontest
                  multiSportsIds: array() // multiple sports ids
                }
              }
      201:
        body:
          application/json:
            example: |
              {
                "status": 201,
                "message": "No Matches Found."
              }

/contests/deletecontest:
  displayName: Delete contest
  post:
    description: Delete contest
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/publishcontest:
  displayName: Publish contest
  post:
    description: Publish contest
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/featurethecontest:
  displayName: Feature contest
  post:
    description: Feature contest
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/unfeaturethecontest:
  displayName: Unfeature contest
  post:
    description: Unfeature contest
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/contests/endContestAdmin:
  displayName: End contest for admin
  post:
    description: End contest for admin
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/savehomepagecontent:
  displayName: Save home page content
  post:
    description: Save home page content
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/uploadbase64:
  displayName: Upload base64
  post:
    description: Upload base64
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/gethomepagecontent:
  displayName: Get homepage content
  post:
    description: Get homepage content
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/gethowtoplaypagecontent:
  displayName: Get how to play page content
  post:
    description: Get how to play page content
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/savehowtoplaypagecontent:
  displayName: Save how to play page content
  post:
    description: Save how to play page content
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/getsimplepagecontent:
  displayName: Get simple play page content
  post:
    description: Get simple play page content
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/savesimplepagecontent:
  displayName: Save simple page content
  post:
    description: Save simple page content
    body:
      application/json:
    responses:
      200:
        body:
          application/json:

/cms/short-url:
  /{code}:
    displayName: Get how to play page content
    post:
      description: Get how to play page content
      body:
        application/json:
      responses:
        200:
          body:
            application/json:

/cms/appversion:
  displayName: Get appversion
  post:
    description: Get appversion
    body:
      application/json:
    responses:
      200:
        body:
          application/json:
